/**
 * Initialize HTTP services for a cartridge
 */
importPackage( dw.svc );
importPackage( dw.net );

var StripeHelper = require('../stripeHelper');
   
/**
* HTTP Service for creating new Customer object
*/
ServiceRegistry.configure('stripe.http.createCustomer', {
	createRequest: function(svc : HTTPService, args : Object) {
		var baseUrl : String = svc.getURL();
		var URL : String = baseUrl + '/customers';
		svc.setURL(URL);
		svc.addParam('source', args.source);
		svc.addParam('email', args.customerEmail);
		StripeHelper.SetServiceHeaders(svc);
	},
	parseResponse: function(svc : HTTPService, client : HTTPClient) {
		return client.text;
	},
	mockCall: function(svc : HTTPService, client : HTTPClient) {
		var mockedResponse = {
			"id": "cus_8mBbHLb3BFIfh1",
			"object": "customer",
			"account_balance": 0,
			"created": 1467900709,
			"currency": "usd",
			"default_source": "card_18UdEG2eZvKYlo2C9BSQks5o",
			"delinquent": false,
			"description": "Bingo|www|0c1234567890",
			"discount": null,
			"email": null,
			"livemode": false,
			"metadata": {
			},
			"shipping": null,
			"sources": {
			  "object": "list",
			  "data": [
			    {
			      "id": "card_18UdEG2eZvKYlo2C9BSQks5o",
			      "object": "card",
			      "address_city": null,
			      "address_country": null,
			      "address_line1": null,
			      "address_line1_check": null,
			      "address_line2": null,
			      "address_state": null,
			      "address_zip": null,
			      "address_zip_check": null,
			      "brand": "Visa",
			      "country": "US",
			      "customer": "cus_8mBbHLb3BFIfh1",
			      "cvc_check": "pass",
			      "dynamic_last4": null,
			      "exp_month": 5,
			      "exp_year": 2017,
			      "funding": "credit",
			      "last4": "4242",
			      "metadata": {
			      },
			      "name": null,
			      "tokenization_method": null
			    }
			  ],
			  "has_more": false,
			  "total_count": 1,
			  "url": "/v1/customers/cus_8mBbHLb3BFIfh1/sources"
			},
			"subscriptions": {
			  "object": "list",
			  "data": [
			  ],
			  "has_more": false,
			  "total_count": 0,
			  "url": "/v1/customers/cus_8mBbHLb3BFIfh1/subscriptions"
			}
		};
		return {
			statusCode: 200,
			statusMessage: 'Success',
			text: JSON.stringify(mockedResponse)
		};
	}
});

/**
* HTTP Service for fetching a list of Customer's cards
*/
ServiceRegistry.configure('stripe.http.fetchCustomerCards', {
	createRequest: function(svc : HTTPService, args : Object) {
		var baseUrl : Sting = svc.getURL();
		var URL : String = baseUrl + '/customers/' + args.customerID + '/sources?object=card';
		svc.setURL(URL);
		svc.setRequestMethod('GET');
		StripeHelper.SetServiceHeaders(svc);
	},
	parseResponse: function(svc : HTTPService, client : HTTPClient) {
		return client.text;
	},
	mockCall: function(svc : HTTPService, client : HTTPClient) {
		var mockedResponse = {
			"object": "list",
			"url": "/v1/customers/cus_8mB7HEGeM8dWZA/sources",
			"has_more": false,
			"data": [
			  {
			    "id": "card_18UckS2eZvKYlo2C9P1M9ugc",
			    "object": "card",
			    "address_city": null,
			    "address_country": null,
			    "address_line1": null,
			    "address_line1_check": null,
			    "address_line2": null,
			    "address_state": null,
			    "address_zip": null,
			    "address_zip_check": null,
			    "brand": "Visa",
			    "country": "US",
			    "customer": "cus_8mB7HEGeM8dWZA",
			    "cvc_check": "unchecked",
			    "dynamic_last4": null,
			    "exp_month": 12,
			    "exp_year": 2019,
			    "funding": "credit",
			    "last4": "4242",
			    "metadata": {
			    },
			    "name": "John Doe",
			    "tokenization_method": null
			  }
			]
		};
		return {
			statusCode: 200,
			statusMessage: 'Success',
			text: JSON.stringify(mockedResponse)
		};
	}
});

/**
* HTTP Service for retrieve Customer object
*/
ServiceRegistry.configure('stripe.http.retrieveCustomer', {
	createRequest: function(svc : HTTPService, args : Object) {
		var baseUrl : String = svc.getURL();
		var URL : String = baseUrl + '/customers/' + args.customerID;
		svc.setURL(URL);
		StripeHelper.SetServiceHeaders(svc);
	},
	parseResponse: function(svc : HTTPService, client : HTTPClient) {
		return client.text;
	}
});

/**
* HTTP Service for update Customer object
*/
ServiceRegistry.configure('stripe.http.updateCustomer', {
	createRequest: function(svc : HTTPService, args : Object) {
		var baseUrl : String = svc.getURL();
		var URL : String = baseUrl + '/customers/' + args.customerID;
		svc.setURL(URL);
	    svc.addParam('default_source', args.cardId);
		StripeHelper.SetServiceHeaders(svc);
	},
	parseResponse: function(svc : HTTPService, client : HTTPClient) {
		return client.text;
	}
});

/**
* HTTP Service for adding new Credit Card to the Customer object
*/
ServiceRegistry.configure('stripe.http.addCard', {
	createRequest: function(svc : HTTPService, args : Object) {
		var baseUrl : String = svc.getURL();
		var URL : String = baseUrl + '/customers/' + args.customerID + '/sources';
		svc.setURL(URL);
		svc.addParam('source', args.source);
		svc.addParam('email', args.customerEmail);
	    StripeHelper.SetServiceHeaders(svc);
	},
	parseResponse: function(svc : HTTPService, client : HTTPClient) {
		return client.text;
	},
	mockCall: function(svc : HTTPService, client : HTTPClient) {
		var mockedResponse = {
			"id": "card_18UckS2eZvKYlo2C9P1M9ugc",
			 "object": "card",
			 "address_city": null,
			 "address_country": null,
			 "address_line1": null,
			 "address_line1_check": null,
			 "address_line2": null,
			 "address_state": null,
			 "address_zip": null,
			 "address_zip_check": null,
			 "brand": "Visa",
			 "country": "US",
			 "customer": "cus_8mB7HEGeM8dWZA",
			 "cvc_check": "unchecked",
			 "dynamic_last4": null,
			 "exp_month": 12,
			 "exp_year": 2019,
			 "funding": "credit",
			 "last4": "4242",
			 "metadata": {
			 },
			 "name": null,
			 "tokenization_method": null
		};
		return {
			statusCode: 200,
			statusMessage: 'Success',
			text: JSON.stringify(mockedResponse)
		};
	}
});

/**
* HTTP Service for deleting credit card from the Customer's object
*/
ServiceRegistry.configure('stripe.http.deleteCard', {
	createRequest: function(svc : HTTPService, args : Object) {
		var baseUrl : String = svc.getURL();
		var URL : String = baseUrl + '/customers/' + args.customerID + '/sources/' + args.cardID;
		svc.setURL(URL);
		svc.setRequestMethod('DELETE');
		StripeHelper.SetServiceHeaders(svc);
	},
	parseResponse: function(svc : HTTPService, client : HTTPClient) {
		return client.text;
	},
	mockCall: function(svc : HTTPService, client : HTTPClient) {
		var mockedResponse = {
			"deleted": true,
  			"id": "card_18UckS2eZvKYlo2C9P1M9ugc"
		};
		return {
			statusCode: 200,
			statusMessage: 'Success',
			text: JSON.stringify(mockedResponse)
		};
	}
});

/**
* HTTP Service for the payment authorizing
*/
ServiceRegistry.configure('stripe.http.authorizePayment', {
	createRequest: function(svc : HTTPService, args : Object) {
		var baseUrl : String = svc.getURL();
		var URL : String = baseUrl + '/charges';
		svc.setURL(URL);
		StripeHelper.SetServiceHeaders(svc);
		StripeHelper.SetServiceParams(svc, args);
	},
	parseResponse: function(svc : HTTPService, client : HTTPClient) {
		return client.text;
	},
	mockCall: function(svc : HTTPService, client : HTTPClient) {
		var mockedResponse = {
			"id": "ch_18UciZ2eZvKYlo2CQLk3NE6P",
			"object": "charge",
			"amount": 400,
			"amount_refunded": 0,
			"application_fee": null,
			"balance_transaction": "txn_18EO2S2eZvKYlo2CNjZyghSs",
			"captured": true,
			"created": 1467898743,
			"currency": "usd",
			"customer": null,
			"description": "Charge for test@example.com",
			"destination": null,
			"dispute": null,
			"failure_code": null,
			"failure_message": null,
			"fraud_details": {
			},
			"invoice": null,
			"livemode": false,
			"metadata": {
			},
			"order": null,
			"paid": true,
			"receipt_email": null,
			"receipt_number": null,
			"refunded": false,
			"refunds": {
			  "object": "list",
			  "data": [
			  ],
			  "has_more": false,
			  "total_count": 0,
			  "url": "/v1/charges/ch_18UciZ2eZvKYlo2CQLk3NE6P/refunds"
			},
			"shipping": null,
			"source": {
			  "id": "card_18UciZ2eZvKYlo2CJSm8s035",
			  "object": "card",
			  "address_city": null,
			  "address_country": null,
			  "address_line1": null,
			  "address_line1_check": null,
			  "address_line2": null,
			  "address_state": null,
			  "address_zip": null,
			  "address_zip_check": null,
			  "brand": "Visa",
			  "country": "US",
			  "customer": null,
			  "cvc_check": "pass",
			  "dynamic_last4": null,
			  "exp_month": 12,
			  "exp_year": 2017,
			  "funding": "credit",
			  "last4": "4242",
			  "metadata": {
			  },
			  "name": null,
			  "tokenization_method": null
			},
			"source_transfer": null,
			"statement_descriptor": null,
			"status": "succeeded"
		};
		return {
			statusCode: 200,
			statusMessage: 'Success',
			text: JSON.stringify(mockedResponse)
		};
	}
});

/**
* HTTP Service for refunding a charge
*/
ServiceRegistry.configure('stripe.http.refundCharge', {
	createRequest: function(svc : HTTPService, args : Object) {
		var baseUrl : String = svc.getURL();
		var URL : String = baseUrl + '/refunds';
		svc.setURL(URL);
		svc.addParam('charge', args.charge);
		StripeHelper.SetServiceHeaders(svc);
	},
	parseResponse: function(svc : HTTPService, client : HTTPClient) {
		return client.text;
	},
	mockCall: function(svc : HTTPService, client : HTTPClient) {
		var mockedResponse = {
			"id": "re_18eNr32eZvKYlo2CQWSVfyL9",
			"object": "refund",
			"amount": 32548,
			"balance_transaction": null,
			"charge": "ch_18bqWC2eZvKYlo2CSX893lSx",
			"created": 1470224889,
			"currency": "usd",
			"metadata": {
			},
			"reason": null,
			"receipt_number": null,
			"status": "succeeded"
		};
		return {
			statusCode: 200,
			statusMessage: 'Success',
			text: JSON.stringify(mockedResponse)
		};
	}
});