
var CustomObjectMgr = require('dw/object/CustomObjectMgr');
var Transaction = require('dw/system/Transaction');
var OrderMgr = require('dw/order/OrderMgr');
var Resource = require('dw/web/Resource');
var Status = require('dw/system/Status');

var StripeHelper = require('*/cartridge/scripts/stripeHelper');
var Stripe = require('*/cartridge/scripts/service/stripe');
var stripeLogger = dw.system.Logger.getLogger('stripe_payments_job', 'stripe');
var logger = require('dw/system/Logger').getLogger('Stripe', 'stripe');

/**
* Compare Stripe Sources and order payment method
* @param stripeNoficationObject: CustomObject Stripe Notification CO
* @param callback : function() callback function for specific behavior
* @returns string
*/
function compareStripeSources(stripeNoficationObject, callback) : Boolean {
	var logMessage = '';
	var order = OrderMgr.getOrder(stripeNoficationObject.custom.orderId);
	if (order != null) {
		var paymentInstruments = order.getPaymentInstruments();
		for each(var paymentInstrument in paymentInstruments) {
			if (paymentInstrument.paymentMethod === 'STRIPE_APM_METHODS') {
				if ('stripeSourceId' in paymentInstrument.paymentTransaction.custom && paymentInstrument.paymentTransaction.custom.stripeSourceId != null && 
					!empty(paymentInstrument.paymentTransaction.custom.stripeSourceId)) {
						if (stripeNoficationObject.custom.stripeSourceId != null && !empty(stripeNoficationObject.custom.stripeSourceId)) {
							if (paymentInstrument.paymentTransaction.custom.stripeSourceId === stripeNoficationObject.custom.stripeSourceId) {
			                    if (callback != undefined) {
			                        logMessage += callback(order, paymentInstrument);
			                    }
							} else {
								//source doesn't match
								logMessage += "\nSources doesn't match, SFCC order id " + stripeNoficationObject.custom.orderId + " CO event id " + stripeNoficationObject.custom.stripeEventId;
								logMessage += "\nSource from webhook: " + stripeNoficationObject.custom.stripeSourceId + ", Source in payment transaction: " + paymentInstrument.paymentTransaction.custom.stripeSourceId;
							}
						} else {
							//empty source id in CO
							logMessage += "\nSources id empty or not exists CO event id " + stripeNoficationObject.custom.stripeEventId;
						}	
					} else {
						//source id not exists or empty on payment transaction
						logMessage += "\nSource id doesn't exists in payment Transaction or empty. SFCC order id " + stripeNoficationObject.custom.orderId;
					}
			}
		}
	} else {
		logMessage += "\nSFCC order id doesn't exists, requested info: \norder id " + stripeNoficationObject.custom.orderId + 
			"\nCO event id " + stripeNoficationObject.custom.stripeEventId + "\n source id " + stripeNoficationObject.custom.stripeSourceId;
	}	
	stripeLogger.info(logMessage);
}

/**
* Send email with failed status for the order to the customer
* @param order : dw.order.Order Order obj
* @returns dw.system.Status
*/
function sendMail(order, templateName) {
	var Email = require('*/cartridge/scripts/models/EmailModel');

    return Email.sendMail({
        template: templateName, //'mail/orderfailed',
        recipient: order.getCustomerEmail(),
        subject: Resource.msg('order.orderconfirmation-email.001', 'order', null),
        context: {
            Order: order
        }
    });
}

/*
* Job start execution point
*/
function execute() {
	var queryString = "custom.processingStatus='PROCESS'";
	try {
		var stripeObjectsIter = CustomObjectMgr.queryCustomObjects(StripeHelper.GetCustomObjectNotificationType(), queryString, null);
		
		while (stripeObjectsIter.hasNext()) {
			var stripeNoficationObject = stripeObjectsIter.next();
			switch (stripeNoficationObject.custom.stripeType) {
				case 'source.chargeable':
					var order = OrderMgr.getOrder(stripeNoficationObject.custom.orderId);
					var orderNo = '';
					var cusEmail = '';
					var stripeCustomerId = '';
					if (order != null) {
						orderNo = order.orderNo;
						cusEmail = order.getCustomerEmail();
						var cust = order.getCustomer();
						if (cust != null && cust.profile != null && 'stripeCustomerID' in cust.profile.custom && !empty(cust.profile.custom.stripeCustomerID)) {
							stripeCustomerId = cust.profile.custom.stripeCustomerID;
						}
					}
					
					var params = {
						amount : stripeNoficationObject.custom.amount,
					    currency : stripeNoficationObject.custom.currency,
					    stripeSourceId : stripeNoficationObject.custom.stripeSourceId,
					    email : cusEmail,
					    stripeCustomerId : stripeCustomerId,
					    orderId : orderNo
					};
					var result = Stripe.CreateCharge(params);
	            	if (result.isOk()) {
	            		stripeLogger.info("Charge was successfull for order {0}, CO event id {1}, source {2}", (stripeNoficationObject.custom.orderId != null ? stripeNoficationObject.custom.orderId : null), stripeNoficationObject.custom.stripeEventId, stripeNoficationObject.custom.stripeSourceId);
	            		Transaction.wrap(function (){
		            		stripeNoficationObject.custom.processingStatus = 'PENDING_CHARGE';	
	            		});
	            	} else {
	            		stripeLogger.info("Unsuccessful charge for order {0}, CO event id {1}, source {2}", (stripeNoficationObject.custom.orderId != null ? stripeNoficationObject.custom.orderId : null), stripeNoficationObject.custom.stripeEventId, stripeNoficationObject.custom.stripeSourceId);
	            	}
					break;
				case 'source.canceled':
				case 'source.failed':
				case 'charge.failed':
					compareStripeSources(stripeNoficationObject, function (order) {
						var chargeJSON = JSON.parse(stripeNoficationObject.custom.stripeWebhookData);
						var failedDetailsForOrder = {
							failure_code : chargeJSON.data.object.failure_code ? chargeJSON.data.object.failure_code : '',
							failure_message : chargeJSON.data.object.failure_message ? chargeJSON.data.object.failure_message : '',
							fraud_details : chargeJSON.data.object.fraud_details ? chargeJSON.data.object.fraud_details : '',
							outcome : chargeJSON.data.object.outcome ? chargeJSON.data.object.outcome : '',
						}
			            var logMessage = Transaction.wrap(function () {
			                order.addNote("Stripe Processing Job Note(failed details)", JSON.stringify(failedDetailsForOrder));
				            var failStatus = OrderMgr.failOrder(order);
				            if (failStatus.status === dw.system.Status.ERROR) {
				            	logMessage += '\n' + failStatus.message;
				            	logger.error('Error: {0}', failStatus.message);
				            } else {
				            	logMessage += '\nSuccessfully set order status to failed';
				            }
				            //TODO Trigger "problem with your payment" email.
				            stripeNoficationObject.custom.processingStatus = 'FAIL_OR_CANCEL';
				            return logMessage;
			            });
			            
			            var statusMail = sendMail(order, 'mail/orderfailed');
			            
			            return logMessage + dw.util.StringUtils.format("\nSuccessfully proccesed CO with event id {0}, source id {1}, updated SFCC order status to 'Fail'. Set up CO processingStatus to {2}, email send - {3}", stripeNoficationObject.custom.stripeEventId, stripeNoficationObject.custom.stripeSourceId, 'FAIL_OR_CANCEL', statusMail.status === dw.system.Status.OK ? 'true' : 'false');
					});
					break;
				case 'charge.succeeded':
					compareStripeSources(stripeNoficationObject, function (order, paymentInstrument) {
						var chargeJSON = JSON.parse(stripeNoficationObject.custom.stripeWebhookData);
			            Transaction.wrap(function () {
			            	paymentInstrument.paymentTransaction.transactionID = chargeJSON.data.object.id;
			            	paymentInstrument.paymentTransaction.custom.stripeChargeId = chargeJSON.data.object.id;
			            	paymentInstrument.paymentTransaction.custom.stripeChargeOutcomeData = JSON.stringify(chargeJSON.data.object.outcome ? chargeJSON.data.object.outcome : {});
			            	paymentInstrument.paymentTransaction.custom.stripeJsonData = stripeNoficationObject.custom.stripeWebhookData;
						    var placeOrderStatus = OrderMgr.placeOrder(order);
						    if (placeOrderStatus === Status.ERROR) {
						        OrderMgr.failOrder(order);
						        return dw.util.StringUtils.format("An error occured durring place order {0}, error message: {1}", order.orderNo, placeOrderStatus.message);
						    }
						    order.setConfirmationStatus(dw.order.Order.CONFIRMATION_STATUS_CONFIRMED);
    		            	order.setPaymentStatus(dw.order.Order.PAYMENT_STATUS_PAID);
			            	order.setExportStatus(dw.order.Order.EXPORT_STATUS_READY);
				            stripeNoficationObject.custom.processingStatus = 'PROCESSED';
			            });
			            
			            var statusMail = sendMail(order, 'mail/orderconfirmation');
			            
			            return dw.util.StringUtils.format("Successfully proccesed CO with event id {0}, source id {1} , updated SFCC order status to 'EXPORT_STATUS_READY'. Set up CO processingStatus to {2}, email send - {3}", stripeNoficationObject.custom.stripeEventId, stripeNoficationObject.custom.stripeSourceId, 'PROCESSED', statusMail.status === dw.system.Status.OK ? 'true' : 'false');
					});
			}
		}	
	} catch (e) {
		logger.error('Error: {0}', e.message);
	}
}

module.exports = {
	'execute': execute
}